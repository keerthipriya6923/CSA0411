#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <errno.h>

int main() {
    int fd;
    char buffer[100];

    // 1. fcntl() – Open a file and set to non-blocking mode
    fd = open("sample.txt", O_RDWR | O_CREAT, 0644);
    if (fd < 0) {
        perror("open");
        return 1;
    }

    int flags = fcntl(fd, F_GETFL);
    if (flags < 0) {
        perror("fcntl - F_GETFL");
        close(fd);
        return 1;
    }

    // Set non-blocking flag
    if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {
        perror("fcntl - F_SETFL");
        close(fd);
        return 1;
    }

    // 2. lseek() – Move file pointer to end
    off_t pos = lseek(fd, 0, SEEK_END);
    if (pos == -1) {
        perror("lseek");
        close(fd);
        return 1;
    }

    printf("Current file pointer position (end): %ld bytes\n", (long)pos);

    // Write some content
    const char *text = "This is sample content.\n";
    write(fd, text, strlen(text));

    // 3. stat() – Get file metadata
    struct stat st;
    if (stat("sample.txt", &st) == 0) {
        printf("\nFile: sample.txt\n");
        printf("Size: %ld bytes\n", st.st_size);
        printf("Permissions: %o\n", st.st_mode & 0777);
        printf("Last modified: %ld\n", st.st_mtime);
    } else {
        perror("stat");
    }

    // 4. opendir() and readdir() – List files in current directory
    printf("\nFiles in current directory:\n");

    DIR *dir = opendir(".");
    if (dir == NULL) {
        perror("opendir");
        close(fd);
        return 1;
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name_
