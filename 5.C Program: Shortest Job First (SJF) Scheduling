#include <stdio.h>

struct Process {
    int pid;            // Process ID
    int burst_time;     // Execution Time
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int is_completed;   // Flag to check if process is completed
};

int main() {
    int n, completed = 0, current_time = 0, i, shortest;
    struct Process p[100];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Input burst times
    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Burst Time for Process %d: ", p[i].pid);
        scanf("%d", &p[i].burst_time);
        p[i].is_completed = 0;
    }

    // SJF Scheduling Logic
    while (completed != n) {
        int min_bt = 1e9;
        shortest = -1;

        // Find process with minimum burst time that is not completed
        for (i = 0; i < n; i++) {
            if (!p[i].is_completed && p[i].burst_time < min_bt) {
                min_bt = p[i].burst_time;
                shortest = i;
            }
        }

        if (shortest == -1) {
            current_time++; // No process is ready
        } else {
            current_time += p[shortest].burst_time;
            p[shortest].completion_time = current_time;
            p[shortest].turnaround_time = p[shortest].completion_time; // arrival time = 0
            p[shortest].waiting_time = p[shortest].turnaround_time - p[shortest].burst_time;
            p[shortest].is_completed = 1;
            completed++;
        }
    }

    // Output results
    printf("\nSJF Scheduling Results:\n");
    printf("PID\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");

    float total_wt = 0, total_tat = 0;
    for (i = 0; i < n; i++) {
        total_wt += p[i].waiting_time;
        total_tat += p[i].turnaround_time;

        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n",
               p[i].pid,
               p[i].burst_time,
               p[i].completion_time,
               p[i].turnaround_time,
               p[i].waiting_time);
    }

    printf("\nAverage Waiting Time = %.2f\n", total_wt / n);
